
day 01   20180604


面向工资编程

   编程

学习的方法论：
		复杂的事情简单化，简单的事情重复做
		
		     10000小时理论

舒适区      学习区      恐惧区 
		     	 	
		     	 刻意练习
		     	 反馈机制
		     	高水平重复
		     	 10000小时 
		     	 
		     	 1天8小时  1年 52周  1周5天    8 * 5 * 52 = 40 * 52 = 2080
		     	 
		     	 10000 / 2080 = 5年
		     	 
		     	 
		     	 90 * 12 = 1080
		     	      

学计算机 --> 实践


C++的编程范式（思维方式）:
		面向过程(C)
		基于对象(C)
		面向对象(语法规则非常多)
		泛型编程
		模板元编程
		函数式编程（lisp schema）

C++学习方法：
		先学语法规则  -->  应用
		
		
对键盘不熟:
		> 多聊天
		> 打字软件
		> 熟能生巧
		
		大道至简

要比跟自己比，跟过去的自己比


上课纪律：


操作系统：
		Windows 面向小白用户  GUI
		Linux   面向专业人员  命令行
													程序接口
		
		


VIM   编辑器之神
Emacs 神之编辑器


版本控制系统
	> Git  分布式
	> Subversion 集中式

1. 安装git：

		# apt-get install git        //root权限
		$ sudo apt-get install git   //一般用户权限

2. 注册用户名：
  www.github.com 
  
3. 初始化本地仓库
	$ git init
  
4. 设置全局变量  
	$ git config --global user.name "Your Name"
	$ git config --global user.email "email@example.com"
	

5. 常用命令行操作

	 $ git add readme.txt   --> 暂存区
	 $ git commit -m "add first file readme.txt"  --> 版本库 
	 
	 $ git reset --hard 版本号   切换版本
	 
	 $ git status  查看版本库状态
	 
	 $ git add .   把当前工作区的所有被修改的文件一次性全部添加到暂存区
	 
	 
	 working directory 工作区
	 
	 暂存区
	 
	 版本库  
	 
	 
6. 使用SSH协议远程连接版本库
	
	$ cd ~

	$ ssh-keygen -t rsa -C "youremail@example.com"
	
	$ cd .ssh/
	$ cat id_rsa.pub
		
	ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDf5D8amK/Tfd1yTs7VUc0OakMNbFfrCqdgLC8oYZnKx5tfSPwrnywT13a1zRc4x9hgtrajWiagbtZPGMHQ8NBJe2a3aNCl+XKeg09hn/HAxVpRGqM3PPljA8gSgxGlELYz+99ivylMwQ3BinddAXLN1AoiCkSNr630nByi1Aiqd8UgMPA0Sy2deA9bb4ddGFxemFhkXj1gmR+7Ik2nSw2vYuo5Mfvv11OadgpLhvD4xHYf3DBHS8lg+8Lx1uh35cKy4NvAarUfzG9nN9Y7CwNfFcZPFTa3a93yo+fF3PhkD+MzPu335uRXOGoUgKkosiqmeN1IVieQAe3VjNNuTnCp haohb13@gmail.com

	$ git remote add origin git@github.com:uername/learngit.git
	
	$ git push -u origin master
	
	
7. 拷贝其他开源库
	git clone https://github.com/yanyiwu/cppjieba.git
	
	
	
VIM的IDE化

		Vundle  			 vim插件管理器
		YouCompleteMe  自动补全、语法检查
		CtrlP   			 文件快速查找
				,,   连续按2个逗号激活ctrlp插件
				ctrl + j,k  向上或向下选择文件，直接按回车就会打开某一个文件
				ctrl + t    在一个新选项卡中打开某个文件
				g + t       向后切换选项卡
				g + T       向前切换选项卡
				


day 02   20180605
		C与C++的区别
		
C++的编程范式（思维方式）:
		面向过程(C)
		基于对象(C)
		面向对象(语法规则非常多)
		泛型编程
		模板元编程
		函数式编程（lisp schema）
		
		
		C++ 语法规则多 概念 --> 代码  
		
		
		1. 命名空间
				> using namespace std;  using编译指令
				> using std::cout;      using声明机制  推荐使用
				> std::cout             作用域限定符
				
				int number = 10;    C的标准库 -->   匿名命名空间
				
				  
								
				namespace wd
				{
				
				}
		
		2. const关键字
				> int  number = 10;
				
				> const int * pa = &number; //常量指针(pointer to const)
							> 不能通过该指针修改所指变量的值   *pa = 1;
											
				> int const * pb = &number;
				
				> int * const pc = &number;//指针常量(const pointer)
							> 不能改变指针的指向
				
		
		3. 引用
				> int number = 1;
				> int & ref = number;
				> 引用是变量的别名, 操作引用跟操作变量本身是一样的
				> 引用不能独立存在, 必须要进行初始化
				
				> 作为函数的参数   引用传递要比值传递的效率高
				
				> 作为函数的返回值
						> 返回的变量生命周期一定要大于函数的生命周期
						
						> 不能返回局部变量的引用
						> 不要轻易返回一个堆空间变量的引用，防止发生内存泄漏
						
						> 空指针  0  NULL  nullptr
						> 野指针  int * p;
						> 踩内存
				
		
		void func(int,int,int)
		
		概念
		
		4. 函数重载 -->  extern "C"
					> C语言不支持函数重载(overload)
					> C++支持
							> 实现原理: 名字改编(name mangling)
							> 具体步骤: 当函数的名称相同时，根据形参的类型、个数、顺序来进行改编
		
		5. new/delete表达式
					
					> malloc/free 区别
					
		
		6. 强制转换
				 static_cast/const_cast/dynamic_cast/reinterpret_cast
		
		7. 默认参数
					> 默认参数的设置要从右到左的
				 int add(int x = 0,int y = 0);//在声明的时候赋值
				 
				 add()
				 add(1);
				 add(2,3);
		
		8. inline函数
				> 在功能上跟带参数的宏定义效果是相同的
				> 好处：有类型检查, 会降低出错的可能性
				
		
		9. bool类型
		
		10. std::string
				> C++风格的字符串
				> C风格的字符串: const char *
				
				> std::string s1 = "hello";
				> const char * p = s1.c_str();
					p = s1.data();
				
				> 字符串长度: size() length()	
				> 字符串拼接:   +  append
				> 截取子串:  substr
				> 遍历:  数组  s1[0]  s1[1] ;	
				> for(int idx = 0; idx < s1.size(); ++idx)
				
				> for(auto & ch : s1)     C++11
		
C++入门书籍:
		C++ primer 
		

day 03   20180606	
		0. 复习
		
				两种不同的思维方式：
						
						面向对象   vs   面向过程
						
				三个小伙伴入住酒店：
						小明      小雷      小梅 
						
				
						
				1. 交300给酒店老板
				
				2. 酒店老板要退50给小伙伴，实际上交给了店小二
				
				3. 店小二退每人10块		
				
				面向过程:
						> 数据结构存放余额 int arr[5];
						> 封装成3个函数
						
						
				面向对象:  
						> 只有5个对象在进行交互		
				
				
				面向对象的第一个特征是抽象， 由对象 --> 类的过程
				
				再由类 --> 对象， 实例化的过程


			去掉编译优化，要加上编译选项  -fno-elid-construtors
			
			
			
			作业：写作业  不追求当天完成   一个星期统计一次
			
			
		> C++内存布局
			读写
				> 栈区
				> 堆区          malloc：系统调用   new
				> 全局/静态区 
			只读	
				> 文字常量区  
				> 程序代码区	
				
		
		> better C   -->  C++
				
		> 面向对象四大特征: 抽象  封装  继承  多态
		
		> 类的定义：
				
				struct 结构体名 {
						
				};
		
			  class 类名
			  {
			  public: //类对外提供的服务或接口
			  		数据成员
			  		成员函数
			  
			  private:
			  
			  
			  protected: //对子类开放
			  		数据成员
			  		成员函数
			  private:  //只能在类内部访问
			  		数据成员
			  		成员函数
			  };
			  
		class Point
		{
		public:
			Point(){}
		
			Point(int ix,int iy)
			: _ix(ix)
			, _iy(iy)
			{}
			
			Point(int ix)
			: Point(ix, 0)
			{}
		
		private:
			int _ix;
			int _iy;
		};
		
		Point pt(1,2);
		Point pt2 = pt;
		
		void func(Point p) // 值传递 --> 复制
			  
	
			  
		Point func1()
		{
			//...
			return pt;
		}
		
		int func2()
		{
			//...
			return x;
		}
		
		Computer func()
		{
				return 
		}
	
		> 对象的创建
				> 构造函数: 名称都与类名相同, 没有返回值
						> 默认构造函数
						> 复制构造函数
								> 类名(const 类名 & rhs);
										> 参数中的&不能删；如果删除会导致无穷递归，直到栈溢出 
										> const 不能删；如果删除，就不能绑定到临时对象（匿名对象）
								
								> 调用时机:
										> 用一个已经存在的对象初始化另一个新对象
										> 函数的形参是对象，实参与形参进行结合时
										> 函数的返回值是对象, 执行return语句时      -fno-elide-constructors
						> 有参构造函数
						> 委托构造函数 C++11提供
						
				> 初始化表达式
				
				Computer com1;
				Computer com2;
				com2 = com1;
				
				> 赋值运算符函数   =   左操作数， 右操作数 
						> void operator=(const 类名 & rhs);
						> 在类的数据成员中有向系统申请资源的
						
						> 考虑自复制
						> 回收左操作数申请的资源
						> 开辟新的空间，申请资源
						
						
				> 隐含的this指针，作为成员函数的第一个参数
		
		
		> 对象的销毁
				> 析构函数: 名称都与类名相同, 没有返回值, 没有参数, 必须要在前面加上波浪号
				
				
		> 特殊成员的初始化
			> 都要放在初始化列表之中进行
				> const数据成员
				> 引用数据成员
				> 对象数据成员
			> static数据成员需要在类之外进行初始化
				> 被类或类创建的对象共享
				> 全局/静态区
				
				
		> 特殊的成员函数
				> 静态成员函数
						> 它的形参列表之中没有隐含的this指针
						> 不能调用非静态的数据成员
						> 不能调用非静态的成员函数
						> 只能调用静态的成员
						> 可以直接通过类名调用
						
				> const成员函数
						>  void print() const   =>   const 类名 * const this
						> 在其内部是不能修改数据成员
						> 也不能调用非const成员函数
						
						> const对象只能调用const成员函数,必须要提供一个const版本的成员函数

是什么？ what
为什么？ why
怎么做？ how
		
		> 设计模式(23种):
				> 单例模式
				> 要求: 在内存中只能生成一个对象
						> 1. 将构造函数私有化
						> 2. 在类中顶一个静态指针，在类之外初始化为空
						> 3. 在类中再顶一个返回值为类对象指针的静态成员函数
					
					class Singleton
					{//
					public:
						static Singleton * getInstance()
						{
							if(NULL == _pInstance) {
								_pInstance = new Singleton;
							}
							return _pInstance;
						}
											
					private:
						Singleton(){}
						
					private:
						static Singleton * _pInstance;
					
					};
					
					Singleton * Singleton::_pInstance = NULL;
					
					Singleton s1;//error 
					Singleton s2;
					
					Singleton * p = new Singleton;//error
		
			
day 04   20180607
		0. 复习
		
day 05   20180608
		> malloc 系统调用  用户态与内核态的切换

		> new/delete表达式扩展
				> new表达式的操作步骤:
						> 先调用operator new 标准库函数开辟未类型化的空间
						> 调用类的相应构造函数
						> 返回该对象的指针
						
				> delete表达式的操作步骤:
						> 先调用析构函数
						> 再调用operator delete回收空间
					
		> 创建栈对象 
				> 构造函数,析构函数都在public区域

		Point pt(1, 2);//ok
		
		Point * p = new Point(1, 2);//error
				
		> 定义一个类,只能在栈上创建
				> 解决方案：把operator new/delete 放在private区域
				
		Point pt(1, 2);//error
		
		Point * p = new Point(1, 2);//ok	
		
		delete p;//error,在类之外无法进行		
		> 定义一个类,只能在堆上创建
				> 解决方案：将析构函数私有化
				> 堆对象回收的时候，要再定义一个成员函数来销毁堆对象


		IO流 
			> input
			
			> output
			
			> 终端
			> 本地文件
			> 字符串
			> 远端  网络IO
			
			
		一流的公司做标准
		二流的公司做服务
		三流的公司做产品
		
		超一流的公司啥都做
		
		> 流都有四种状态
				> goodbit       good()   有效状态
				> badbit  			bad()		 系统级别的故障, 无法恢复
				> failbit			  fail()	 可以恢复的错误
				> eofbit 				eof()    流的末尾
				
				> clear()    重置流的状态
				> ignore()   清空流的缓冲区
		
		> 标准输入输出流 头文件 <iostream>
				std::cout   
				std::cin
				std::cerr 
		
		> 文件输入输出流 头文件 <fstream>
				std::ifstream
				std::ofstream
				std::fstream
				> string line;
				> std::getline(ifs, line)   ->  <string>
				> ifs.read();//获取确定长度的数据
				> 定位函数  文件游标indicator
						> tellg/tellp
						> seekg/seekp
				> close 关闭流

		> 字符串输入输出流  头文件  <sstream>				
				std::istringstream		 将字符串转换成其他类型的数据
				std::ostringstream     将其他类型的数据转换成字符串
				std::stringstream
				
				格式转换
				
				
day 06   20180609
		0. 复习
		
		>  日志库
				 > 服务端程序必备的组件 
				 > 7 * 24小时  
				 > 没有终端进行交互
				 > 追踪服务器程序在运行过程中发生了什么事
				 > 写到文件，保存到磁盘
				 
				 > 运营信息
				 > 系统bug信息
				 
day 07   20180611

		代码风格问题:
			> private部分的内容要统一放在类定义的后部分，
			  不要直接上来就是私有数据成员的声明
			  
			> 对于数据成员的命名、函数名、变量名花点时间想一个好的名字
			
			> 函数的实现尽量要短一点，不超过50行
			
			> 不要在main函数里搞定一切,这是C的思维方式
			
			
		lo4cpp几个类之间的关系：
				Category 负责日志的输出
						> Priority
				Appender 负责日志的目的地
						> OstreamAppender
						> FileAppener
						> RollingFileAppender 回卷文件
				Layout   负责日志的布局
						> BasicLayout  
						> PatternLayout
							> %c Category
							> %p 优先级
							> %x 嵌套诊断上下文信息
							> %d 日期
							> %m 日志
							> %n 换行
				Priority 每一条日志的优先级
						> 值越小，优先级越高
				
				Category与Appender是一对多的关系
				
				Appender与Layout是一对一的关系
								
						
				当日志优先级大于等于Category的优先级时，日志才会被记录
						
		
		
		pthread_mutex_lock
		
		pthread_mutex_init(&_mutex, NULL)
		
		pthread_cond_init(&_cond, NULL)
		
		pthread_mutex_destroy(&_mutex)
		
		pthread_cond_destroy(&_cond)
		
		互斥锁与条件变量的生命周期是各自独立的
		
		pthread_mutex_lock();
		pthread_cond_wait(&_cond, &_mutex);//当前线程阻塞，阻塞之前会先解锁;
		//当另外一个线程唤醒该线程时，首先该线程进行加锁，然后再往下执行
		
		
		class MutexLock; // 
		
		class Condition;
		
		
day 08   20180612
		
		1. 友元
				> friend
				> 普通函数
				> 成员函数
				> 类  
				
				> 在一定程度上，破坏了类的封装性
				> 单向的，不具备传递性，不能继承
				
		2. 运算符重载
				> 总的原则:
						> 为了让自定义类类型与内置类型的数据操作在形式上保持一致 
						
				> 规则:
						> 不能重载的运算符有：
								.   ::   .*   sizeof    ?:
								
						> 重载时，参数的类型必须是自定义类类型或者枚举类型 
								> 不能重载内置类型的运算符
						
						> 运算符的结合性是保持不变
						
						> 逻辑运算符不会再具备短路求值特性
									&&    || 
						  	> 不推荐重载逻辑运算符
						  	
						> 不能臆造一个并不存在的运算符
								$ @ # 
								
						
						> 重载形式:
								> 普通函数
								
								> 友元函数
										>  +   -  *  /
										>  >> <<
											 > 左操作数必须是流对象
											 		cout << a << b << c; // 链式编程
											 		operator(operator(operator(cout, a), b), c);
										> == !=  < >  >= <=
											 		
								
								> (非静态)成员函数 --> 第一个参数是隐含的this指针
										> ++  --  区分：前置和后置
												>  int a = 0;  ++a
												>  Complex & operator++();												
												>  a++
												>  Complex operator++(int);//int 是作为一个标记区分出前置和后置
										
										> +=  -=  /=  *=   %=
												>  a += b;// a = a + b										   		
												> Complex & operator+=(const Complex & rhs);
												
										>  operator new/delete
												> 放在某一个类中，就会对该类起作用
												> 直接以普通函数形式进行重载，对所有的类型都会起作用 
										
										>  类型转换函数
										
										> []  下标访问运算符  
												> arr[0] 
												> 第二个参数可以为任意类型
												
										> ()函数调用运算符
												> 函数对象 --> 携带了状态 --> 闭包 --> lambda(匿名函数)
											  > int  operator()(...)
											 
										>  -> 指针访问运算符
											  > 可以直接返回一个指针类型
											  > 可以返回一个对象，该对象本身也要重载指针访问运算符		
											  
										>  * 解引用运算符
												> 直接返回一个对象
												
						> 类型转换：
								> 由其他类型向自定义类型转换
										Point  pt = 1;
										Complex c = 2;
										> 由构造函数完成的, 隐式转换
										> 要禁止隐式转换采用 explicit关键字
									
								> 由自定义类型向其他类型转换
										> 类型转换函数
										> 成员函数
											  > operator 目标类型();
										> 没有返回值，没有形参
										> 在函数执行体内必须用return 语句以传值方式返回一个目标类型的对象
										> 在一般情况下， 不要使用它
										  								
										  								
						> 类域
								> 全局类
								
								> 嵌套类（内部类）	
										> 如果用private修饰，该内部类只能在内部使用，为外部类服务
										> 设计模式: PIMPL
												> 实现信息隐藏
												> 接口与实现解耦（分离）
												> 以最小的代价实现库文件的平滑升级
								> 需求：单例对象可以自动回收（释放）
								
								> code review
								
								> 内存泄漏检测工具 valgrind
								
								> 静态代码检测工具
								
								> 局部类
						
						
day 09   20180613
		0. 复习
		1. 单例对象的自动释放 
		
		2. COW写时复制技术