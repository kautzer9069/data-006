 ///
 /// @file    Singleton.cc
 /// @author  lemon(haohb13@gmail.com)
 /// @date    2018-06-13 10:58:41
 ///
 
#include <stdio.h>
#include <stdlib.h>
#include <pthread.h> //POSIX
#include <iostream>
using std::cout;
using std::endl;

//
//方案二: 单例对象的自动释放
//	> atexit + pthread_once 

class Singleton
{
public:
	static Singleton * getInstance() 
	{	//pthread_once所注册的函数在多线程环境下只会被执行一次
		//线程安全的
		pthread_once(&_once, init);
		return _pInstance;
	}

	static void init()
	{
		_pInstance = new Singleton;
		atexit(destroy);
	}

	static void destroy()
	{
		if(_pInstance)
			delete _pInstance;
	}

private:
	Singleton() {	cout << "Singleton()" << endl;	}
	~Singleton(){	cout << "~Singleton()" << endl;}
	
private:
	static Singleton * _pInstance;
	static pthread_once_t _once;
};

//静态数据成员的初始化
Singleton * Singleton::_pInstance = NULL;//饿(懒)汉模式  --> 懒加载
pthread_once_t Singleton::_once = PTHREAD_ONCE_INIT;


int main(void)
{
	Singleton * p1 = Singleton::getInstance();
	Singleton * p2 = Singleton::getInstance();
	//Singleton::getInstance()->print();

	printf("p1 = %p\n", p1);
	printf("p2 = %p\n", p2);
	
	return 0;
}

