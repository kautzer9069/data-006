 ///
 /// @file    Singleton.cc
 /// @author  lemon(haohb13@gmail.com)
 /// @date    2018-06-13 10:58:41
 ///
 
#include <stdio.h>
#include <iostream>
using std::cout;
using std::endl;


//自动 --> 析构函数
//
//方案一: 单例对象的自动释放
//	> 静态对象 + 嵌套类
//  > 跨平台的方案(平台无关性)

class Singleton
{
	class AutoRelease
	{
	public:
		AutoRelease() {	cout << "AutoRelease()" << endl;	}
		~AutoRelease() {	
			if(_pInstance)
				delete _pInstance;
			cout << "~AutoRelease()" << endl;	
		}
	};
public:
	static Singleton * getInstance() 
	{	//多线程环境下是非线程安全的
		//加锁
		if(_pInstance == NULL)
			_pInstance = new Singleton();
		return _pInstance;
	}

private:
	Singleton() {	cout << "Singleton()" << endl;	}
	~Singleton(){	cout << "~Singleton()" << endl;}
	
private:
	static Singleton * _pInstance;
	static AutoRelease _auto;
};

//Singleton * Singleton::_pInstance = NULL;//饿(懒)汉模式  --> 懒加载
//静态数据成员的初始化
Singleton * Singleton::_pInstance = getInstance();//饱汉模式
Singleton::AutoRelease Singleton::_auto;


int main(void)
{
	Singleton * p1 = Singleton::getInstance();
	Singleton * p2 = Singleton::getInstance();
	//Singleton::getInstance()->print();

	printf("p1 = %p\n", p1);
	printf("p2 = %p\n", p2);
	
	return 0;
}

