  /// @file    figure.cc
 /// @author  lemon(haohb13@gmail.com)
 /// @date    2018-06-26 15:02:48
 
#include <math.h>
#include <iostream>
using std::cout;
using std::endl;

//面向对象编程
//
//满足开闭原则: 对修改关闭，对扩展开放
class Figure{
public:
	virtual void display() const=0;
	virtual double area()=0;
};//end of Figure

class Circle: public Figure {
public:
	Circle(double radius)
	: _radius(radius)	{	cout << "Circel(double)" << endl;	}

	void display() const	{	cout << "Circle";	}
	double area() 	{	return  Pi * _radius * _radius;	}
private:
	double _radius;
	static double Pi;
};
double Circle::Pi = 3.14159;

class Rectangle : public Figure {
public:
	Rectangle(double length, double width)
	: _length(length)
	, _width(width)	{	cout << "Rectangle(double,double)" << endl;	}
	
	void display() const	{	cout << "Rectangle";	}
	double area()	{	return _length * _width;}
private:
	double _length;
	double _width;
};//end of Rectangle

class Triangle : public Figure {
public:
	Triangle(double a, double b, double c)
	: _a(a), _b(b), _c(c)	{	cout << "Triangle()" << endl; }

	void display() const 	{	cout << "Triangle";	}
	double area()	{
		double p = (_a + _b + _c) / 2;
		return sqrt(p * (p - _a) * (p - _b) * (p - _c));
	}
private:
	double _a;
	double _b;
	double _c;
};

void display(Figure * fig) {fig->display();	cout << "的面积:" << fig->area() << endl;}

//简单工厂模式
//静态工厂方法
//1. 违反开闭原则
//2. 单一职责原则
class FigureFactory {
public:
	static Figure * createCircle(){	
		Figure * fig = new Circle(5);
		return fig;
	}
	static Figure * createRectangle()	{
		Figure * fig = new Rectangle (10, 11);
		return fig;
	}

	static Figure * createTriangle()	{
		Figure * fig = new Triangle (3, 4, 5);
		return fig;
	}
};//end of Figure Factory
 
int main(void) {
	display(&circle);
	display(&rectangle);
	display(&triangle);
	return 0;
}
