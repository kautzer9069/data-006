<@몽이> 그럼 시작하겠씸~
<@몽이> 보이지?
<ChuRack> 네..ㅎㅎ
<@몽이> 너처럼 콘솔로 할까 아님 GUI로 할까?
<ChuRack> GUI..
<@몽이> ㅇㅋ ㅎㅎ
<ChuRack> 저야 GUI를 못 쓰니..-_ -;
<ChuRack> 콘솔로 한거지만..-_ -;
<@몽이> 이해 안가는 부분 있으면 질문하세요
<ChuRack> 이왕이면 GUI로 해서..
<@몽이> 알찌 뮤젠? 
<@몽이> 오킷
<ChuRack> 저도 GUI 공부하고 싶어욤..
<@몽이> 오킷
<muzen> 네 ㅎ
<@몽이> 그럼 먼저 인터페이스를 만듭세
<ChuRack> 형 그런데..
<@몽이> New -> resource
<@몽이> 응
<ChuRack> 저처럼..
<@몽이> 응
<ChuRack> Map 쓰실꺼에요? 아니면 그냥 Load?
<@몽이> load
<@몽이> 기능은 똑같은데 소스가 짧아지잖아 ㅎㅎ
<ChuRack> 오홍.
<ChuRack> 넵.
<@몽이> 너가 만든거 실행해볼까
<ChuRack> 굳이 안해도..-_ -;
<@몽이> ㅎㅎ 
<@몽이> 뮤젠아 그냥 녹화 해줄래?
<muzen> 네 알겠습니다~!
<muzen> ㅎ
<@몽이> 엉 땡큐
<muzen> 네 녹화시작이여 ~
<sjh21a> 헉 다 깨졌다 ㄱ-
<sjh21a> 우앙
<@몽이> 뭐가 깨져?
<muzen> 이야 콘솔이여두 나올건 확실하게 다 나오네요;
<sjh21a> 계란이요 ㅠ
<@몽이> ㅋㅋㅋ
<sjh21a> 콘솔이 더 멋있네요 ㅋㅋ
<@몽이> 이미지 베이스는 출력 안했네
<ChuRack> -_ -;; 굳이 제꺼 안 봐도..
<ChuRack> 이미지 베이스 출력 되요..
<ChuRack> File 헤더에 있음.
<@몽이> 오호
<@몽이> 어디
<@몽이> 엔트리 포인트 말하는거 아냐?
<ChuRack> 아니네..잠시만요...ㅎ
<@몽이> 이미지베이스랑 엔트리 포인트 차이 알어?
<@몽이> 오 있긴 있네
<ChuRack> Optional 헤더네요.
<@몽이> 응
<@몽이> 이미지베이스랑 엔트리 포인트 차이 
<@몽이> 맞춰보셈
<ChuRack> 흐으으으으음...
<ChuRack> 갑자기 헷갈리네..
<@몽이> 이미지 베이스 = PE 이미지가 적재된 메모리 시작 주소
<ChuRack> ㅇㅇ
<ChuRack> 그거는 아는데.
<@몽이> 엔트리 포인트 = 실행 코드가 메모리에 적재된 시작 주소
<ChuRack> 엔트리 포인트가..
<ChuRack> 아..맞다.
<@몽이> 그니까
<@몽이> 이미지 베이스 + 엔트리 포인트 RVA = 실제 엔트리 포인트
<@몽이> 근디
<muzen> 아.. 맞다 책에서 봤는데.. OTL
<@몽이> 결과 봐바 
<@몽이> 뮤젠 중간에 모르면 막 물어보고
<@몽이> 결과 보면
<@몽이> OPTIONAL HEADER에 정의된 이미지 베이스는 0x010000000인디
<@몽이> 실제로 적재된 이미지 베이스는
<@몽이> 0x00390000이네
<sjh21a> 다르네요?
<@몽이> 응
<@몽이> 공유 라이브러리 형태로 적재될 땐 0x01000000인디
<@몽이> CreateFileMapping으로 적재하면 0x00390000으로 가네
<ChuRack> 어랏..왜 그러지..-_ -a
<muzen> 메모리 영역이 다르건가여
<@몽이> 응 영역이 다르지
<@몽이> LoadLibray로 적재시키면 공유 메모리 영역으로 가고
<@몽이> CreateFileMapping으로 하면 훨씬 앞쪽 영역으로 가네
<sjh21a> 어 에리카다
<muzen> 에리카 ㅎㅎㅎ
<sjh21a> 위에 있네용
<@몽이> 무슨 영역인지는 몰겄다 안나오네
<@몽이> 하여튼
<@몽이> 추락이가 아까 load한거랑 create한거랑 주소 같냐고 했는데
<@몽이> 다르구만 나도 같을줄 알았는데
<ChuRack> 흐으음.
<@몽이> 뭐 분석하는덴 상관없지
<@몽이> 어차피 RVA 값으로 참조하니까
<@몽이> 헷갈리는 부분 있어?
<ChuRack> 흐으으으으음..
<sjh21a> 전 그럭저럭 ok ㅎ
<@몽이> 0x00390000 이란 주소는 아마 공유 메모리를 제외한, 새로운 데이터가 저장되기 적당한 주소인듯
<@몽이> 0x0040000 메모리는 pe 분석기 자체가 차지하고 있는 메모리 주소고
<@몽이> 금 윈도용 pe 분석기 만들어봅세 ㅎㅎ
<@몽이> 일단 프로그램 인터페이스 만들고..
<@몽이> 인서트 -> 리소스 -> 다이얼로그
<ChuRack> 흐으으으음..
<sjh21a> 전 저런거 만들면 삐뚤삐둘 하던데 ㄱ-
<ChuRack> 흐으음..
<ChuRack> 이벤트 처리하는게 빡세더라..-_ -;
<sjh21a> ㅎㅎ 죄다 이벤트니까요
<@몽이> 인터페이스 끝
<sjh21a> 빠르다!!!
<ChuRack> 그러게..
<sjh21a> 분명 몇번 만들어 보신듯
<sjh21a> 강좌를 위해 ㅋㅋ
<ChuRack> 흐으음..
<ChuRack> 역시 대단한 솜씨..-_ -
<ChuRack> 난 아직도 Hello World 만드는데도 힘든데..
<sjh21a> 전 복사해서 써요 ㅋㅋㅋㅋ
<ChuRack> 후훗..
<@몽이> 일단 선택한 파일의 이름 가져오기
<@몽이> 저장해놓은거 긁어와서 씀 ㅎㅎ
<@몽이> 지금 보이는건 파일 열기 창을 띄운 후 선택한 파일의 파일명을 가져오는겨
<ChuRack> 넵.
<@몽이> 이제 pe 분석 함수 만들기~
<sjh21a> 뭔가 포스가 느껴져요
<ChuRack> ㅇㅇ
<sjh21a> 아 내일 아침은 슈퍼 가서 족발 사와야지 
<@몽이> add_text 함수는
<@몽이> 주어진 윈도우에 문자열을 추가하는 함수~
<ChuRack> 오홍.
<sjh21a> @_@
<sjh21a> 와
<@몽이> 크흐 에디트 박스를 리드 온리로 했다 실수로
<@몽이> 얼레 똑같네-_-
<sjh21a> ~.~
<@몽이> 에디트 박스 핸들을 안정해줬구나
<@몽이> 1단계 성공
<@몽이> 추락아 변수 뭐뭐 뿌려볼까
<ChuRack> 흐으음..
<ChuRack> 웬만하면 다 뿌렸으면 좋겠는데...
<ChuRack> 그렇게 안되면..
<ChuRack> 중요한 것은 뿌려야 겠죠..ㅎ
<ChuRack> DOS 헤더에서는..
<ChuRack> e_maigc이랑 맨 마지막의 e_lfanew
<@몽이> 그래 다 뿌리지 뭐  ㅎㅎ
<ChuRack> ^-^;;
<sjh21a> 헉
<sjh21a> ㄱ- 언능 자라네요
<sjh21a> 쫌만 더 보다가
<@몽이> 헥헥 노가다
<ChuRack> ^-^;;
<@몽이> gprgpr
<@몽이> 헥헥..
<sjh21a> 대단하심
<@몽이> 됐지 ㅎㅎ
<ChuRack> ^-^
<ChuRack> 넵.
<@몽이> MZ랑 PE 사인 체크
<@몽이> 음
<ChuRack> 으흠..
<@몽이> 해야지
<@몽이> 아흑 귀차너
<ChuRack> ㅋㅋㅋㅋ
<ChuRack> 그런데 저거 바꿔도 실행을 됐잖아요..ㅋㅋㅋ
<ChuRack> 윈도우에서도 체크 하지 않는..ㅋㅋㅋ
<sjh21a> 더이상 버티면 맞겠삼 
<ChuRack> ^-^;;
<sjh21a> 저 먼저 자러 갈게요 ㅠㅠ
*** sjh21a 님이 #wiseguys 채널을 나갔습니다.
<@몽이> 헐
<@몽이> 엉
<ChuRack> ^-^;;
<@몽이> 아웅 졸려-_-;; 빨리 해야지
<ChuRack> 흐으음..
<ChuRack> 대단하3..-_ -
<@몽이> ㅠ.ㅠ
<ChuRack> ^-^;;
<ChuRack> 그냥 몇개만 하죠..ㅎㅎㅎ
<@몽이> 아흑 노가다
<@몽이> 웅 ㅎㅎㅎ
<@몽이> 커헉.. ㅎㅎ
<ChuRack> idata 섹션이 RVA를 이용한 값이 많기 때문에
<ChuRack> idata 섹션만 제대로 출력하고 나머지는 그냥 몇개만..^-^;;
<ChuRack> 고생이 많으 시네요..ㅜ ㅡ
<ChuRack> 형...내가 설 올라가서 밥 한끼 대접할게요..ㅜ ㅡ
<@몽이> 됐지 ㅎㅎ
<@몽이> 응 ㅠ.ㅠ
<@몽이> 잘된다 ㅎㅎ
<ChuRack> ^-^
<@몽이> PE 출력 끝 ㅎㅎ
<@몽이> 이제 함수 출력~
<ChuRack> ^0^
<@몽이> 잠시..
<@몽이> 오줌좀
<ChuRack> 넵..^-^
<@몽이> 함수가 어딨게~ ㅎㅎ
<@몽이> 뮤젠 안심심해?
<@몽이> IMAGE_NT_HEADERS ->
<@몽이> IMAGE_OPTIONAL_HEADER32 ->
<@몽이> IMAGE_DATA_DIRECTORY[IMAGE_DIRECTORY_ENTRY_IMPORT] ->
<ChuRack> 그 다음에 섹션 헤더.
<ChuRack> 아..
<ChuRack> .idata는
<ChuRack> 디렉토리의 1번 인덱스
<@몽이> ㅇㅇ
<@몽이> -> VirtualAddress
<@몽이> 일단 여까지 참조해볼께
<muzen> 잠이 계속 쏟아짐... OTL
<@몽이> ㅎㅎ 거의 다 했어
<@몽이> 어디 틀렸쥐
<ChuRack> ㅎㅎㅎ
<ChuRack> 저도 그래서 GG ..-_ -;;
<@몽이> 젠장
<@몽이> 프리를 해버렸구만-_-;;
<@몽이> FreeLibrary((HMODULE)pIDH);
<@몽이> 이론..
<ChuRack> 흐으음..
<@몽이> 잘된다 ㅎㅎ
<ChuRack> 오홋..
<ChuRack> 왜 IDH에서 + 를 해 주는 거에요?
<@몽이> 아
<@몽이> IMAGE_IMPORT_DESCRIPTOR가 DLL 한 개의 정보를 담고 있는 구조체인데
<@몽이> 만약 DLL 이 6개라면, 
<@몽이> [IMAGE_IMPORT_DESCRIPTOR]
<@몽이> [IMAGE_IMPORT_DESCRIPTOR]
<@몽이> [IMAGE_IMPORT_DESCRIPTOR]
<@몽이> [IMAGE_IMPORT_DESCRIPTOR]
<@몽이> [IMAGE_IMPORT_DESCRIPTOR]
<@몽이> [IMAGE_IMPORT_DESCRIPTOR]
<@몽이> 이렇게 6개가 메모리에 이어져 있거든
<@몽이> 그래서 맨 처음 pIID는 
<@몽이> 첫 번째 IMAGE_IMPORT_DESCRIPTOR
<@몽이> 이제
<@몽이> pIID++ 해주면
<@몽이> 위 문법은
<ChuRack> 아...
<ChuRack> 그게 아니라..
<@몽이> pIID = pIID + sizeof(pIID);
<@몽이> 응
<ChuRack> 맨 처음 IMAGE_IMPORT_DESCRIPTOR 구하는 방법에서요.
<@몽이> 응
<@몽이> 아~
<@몽이> IDH
<ChuRack> 넵.
<@몽이> 잘못봤다
<ChuRack> IMAGE_DOS_HEADER..^-^
<@몽이> (DWORD)pIDH + pIID->Name)
<@몽이> 여기?
<ChuRack> 흐으음..
<ChuRack> 맨처음에 구한것도 그렇고..
<@몽이> (DWORD)pIDH + (DWORD)pINH->OptionalHeader.DataDirec
<@몽이> 여기?
<@몽이> 아
<ChuRack> ㅇㅇ
<@몽이> 그게
<ChuRack> 거기요..ㅎ
<@몽이> 위쪽의
<@몽이> VIRTUALADDRESS도 그렇고
<@몽이> 아랫쪽의
<@몽이> NAME도 그렇고
<@몽이> 둘 다 RVA 값이거든
<@몽이> 그래서 IMAGEBASE + RVA로 가기 위해
<ChuRack> 그렇죠..
<@몽이> IMAGEBASE로 IDH를 쓴거지
<@몽이> 웅
<ChuRack> IMAGE_BASE 값을 더해주면 되는거 아닌가?
<ChuRack> 아....
<@몽이> 엉 그래서 더해준거자너
<@몽이> ㅎㅎ
<@몽이> 이해된겨?
<ChuRack> 아함..
<ChuRack> 흐으으으으으으음..-_- a
<ChuRack> 우선 한번 제가 해 보고..
<ChuRack> 다음에 또 물어 볼께요..^0-^
<@몽이> 아냐 짐 물어봐
<ChuRack> 형 소스 좀 올려 주시면 안될까요?ㅎㅎㅎㅎㅎ
<@몽이> 이해 안가는 부분
<@몽이> 엉 올려줄께
<ChuRack> 아...우선 제꺼 코드로 한번 해 보면서..
<ChuRack> 형처럼 한번 해 보고..되나 한번 볼려구요..ㅋ
<@몽이> 오킷
<ChuRack> ㅎㅎㅎㅎㅎㅎ
<ChuRack> 역시 몽이형 짱이3...
<@몽이> 아흑 끝 ㅠ.ㅠ
<ChuRack> 수고 많으셨습니다..^-^
<ChuRack> 올..
<ChuRack> 펑션까지..-0ㅡ;;
<ChuRack> 역시 짱이3..ㅜ ㅡ
<ChuRack> 대단!!!
<@몽이> ㅠ.ㅠ
<@몽이> 주소도 뿌려야게따
<ChuRack> ㅋㅋㅋㅋㅋㅋ
<@몽이> 이 주소가 아닌디 ㅎㅎ
<@몽이> 헉 주소는 보류 ㅎㅎㅎㅎ
<ChuRack> ^-^;;
<@몽이> 끝났고
<ChuRack> 넵!
<@몽이> 저 idata 분석 과정을 정리하면..
<ChuRack> ㄴ ㅔ~
<@몽이> 잠시 정리좀
<@몽이> 일단
<@몽이> Show_IDATA 함수가 참조한 메모리 영역은
<@몽이> .idata 부분이지
<ChuRack> 흐으음.
<@몽이> [DOS헤더]
<@몽이> [NT헤더]
<@몽이> [섹션 헤더들]
<@몽이> [섹션1 .idata]
<@몽이> [섹션2 .xxx]
<@몽이> ...
<@몽이> [리소스]
<@몽이> 오킷?
<ChuRack> 아니요!
<@몽이> 오잉
<@몽이> 왜
<ChuRack> idata는 섹션테이블에 저장이 안 되욧..
<@몽이> 오잉 무쉰..
<ChuRack> 아...
<@몽이> 섹션 테이블 == 섹션 헤더들
<@몽이> ㅎㅎㅎ
<@몽이> ㅇㅋ?
<@몽이> 그 아래쪽으론 실제 섹션 data
<@몽이> 내가 헷갈리게 썻구만
<ChuRack> 넹.
<@몽이> 오키
<@몽이> 그리고
<@몽이> 위
<@몽이> .idata는
<@몽이> 다시 들여다보면
<@몽이> [IMAGE_IMPORT_DESCRIPTOR]의 배열
<ChuRack> 넵.
<@몽이> 각 구조체 하나는
<@몽이> DLL 하나를 담당하고
<@몽이> IMAGE_IMPORT_DESCRIPTOR -> name은 그 담당하는
<@몽이> DLL의 이름을 향한 RVA
<@몽이> 그래서
<@몽이> (DWORD)pIDH + pIID->Name로 이름 출력한기고
<ChuRack> 넵..
<@몽이> 실제 함수 정보는
<@몽이> IMAGE_THUNK_DATA라는 또 다른 공간에 저장
<@몽이> 마찬가지로 IMAGE_THUNK_DATA 하나당 함수 하나의 정보를 가지고 이꼬
<@몽이> 이 IMAGE_THUNK_DATA의 주소는
<@몽이> pIID->Characteristics 가 가지고 있음~
<ChuRack> 넵.
<@몽이> 고로
<@몽이> (IMAGE_THUNK_DATA *)((DWORD)pIDH + (DWORD)pIID->Characteristics) 로
<@몽이> 이미지 청크 데이터의 시작 주소를 찾았고
<@몽이> IMAGE_THUNK_DATA 안에 해당 함수의 이름이 저장되어 있으면 좋은디....
<@몽이> 그게 아니고
<@몽이> 또 다른 메모리 영역에 그 이름이 저장되어 있고
<ChuRack> 넵.
<@몽이> 그 구조체의 이름은
<@몽이> IMAGE_IMPORT_BY_NAME
<@몽이> 이 구조체의 주소는
<@몽이> pITD->u1.AddressOfData라는 RVA로 참고~
<@몽이> 이제 마지막으로
<@몽이> pIIBName->Name를 출력하면 함수 이름 출력 끝~
<@몽이> 정리하면
<ChuRack> 흐으음.
<ChuRack> 넵!
<@몽이> IMAGE_IMPORT_DESCRIPTOR(DLL정보) -> IMAGE_THUNK_DATA(함수 정보) -> 
  IMAGE_IMPORT_BY_NAME(함수 이름 정보)
<@몽이> 이렇게 순서대로 참조해가며 출력한겨
<@몽이> ㅇㅋ?
<ChuRack> 네..ㅎㅎㅎ
<ChuRack> ^-^
<@몽이> 아흑 끝 ㅠ.ㅠ
<@몽이> 수고 증말 많았다
<ChuRack> 진짜 수고 많으셨습니다.
<@몽이> 뮤젠이도 수고 넘 많아따
<ChuRack> 저보다 형이 수고가 많으셨죠.
<ChuRack> 제가 한게 뭐가 있다고.
<@몽이> 다 같이 수고 많았다 ㅎㅎㅎ
<ChuRack> 밤늦은 시간에 고생 많으 셨습니다.
<@몽이> 응~
<ChuRack> 제가 설가면 한턱 쏠게요..ㅡㅡㅋ
<@몽이> 뮤젠은 자나보네
<@몽이> 응응
<ChuRack> ^-^